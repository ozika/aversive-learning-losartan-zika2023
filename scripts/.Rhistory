group_by(id, drug_str, visit_str, sb, phase_str) %>%
summarise_at("switchpoint", funs(mean), na.rm = TRUE)
pal <- get_colors("ond")
g <- ggplot(data = df, aes(y = switchpoint, x = visit_str, fill = drug_str)) +
geom_flat_violin(position = position_nudge(x = .2, y = 0), alpha = .8, show.legend = FALSE, lwd=1.2) +
geom_point(aes(y = switchpoint, colour=drug_str), position = position_jitter(width = .15), size = 1, alpha = 0.8, show.legend = FALSE) +
geom_boxplot(width = .2, outlier.shape = NA, alpha = 0.7,lwd=1.2, show.legend = TRUE) +
#geom_label(data = df2, aes(label = BIC, x = model, fill = drug_str, y = 100),  size=5) +
expand_limits(x = 3) +
scale_color_manual(values = c(pal[8], pal[10]), name = "group", labels = c("placebo", "losartan")) +
scale_fill_manual(values = c(pal[8], pal[10]), name = "group", labels = c("placebo", "losartan")) +
theme_bw() +
raincloud_theme
g
m <- lmer(switchpoint ~ drug_str*visit_str*phase_str + (1+visit_str+phase_str|id)  + (1|sb) , data2) # without half
anova(m)
joint_tests(m, by = c("visit_str"))
em <- emmeans(m, specs = pairwise ~ visit_str*drug_str, adjust=adjustment_method)
em$emmeans
em$contrasts
mean(data2$switchpoint)
sd(data2$switchpoint)
data<-read.csv(here::here(data_dir,  "full_beh_dataset_p3.csv"))
data<-data[which(data$Trial_Type %in% c(1,2) & (data$visit %in% c(2))),]# & (data$Reversal_ID %in% c(1,2,3,4,5,6))),]
fields <- c("visit", "trtype_str", "drug", "outcome", "id")
data$err <- data$err_true
data<- assign_var_types(data, fields)
df <- data %>%
group_by(id, drug_str,  trtype_str, sb) %>%
summarise_at(c("err", "prob"), funs(mean), na.rm = TRUE)
#emm_options(pbkrtest.limit = 7380)
m <- lmer(prob ~   drug_str*trtype_str + (1|id) + (1|sb), data=df)
anova(m)
emmeans(m, pairwise ~ drug_str*trtype_str, adjust=adjustment_method)
t.test(data=df[df$trtype_str %in% "low-prob",], prob ~ drug_str )
t.test(data=df[df$trtype_str %in% "hi-prob",], prob ~ drug_str )
# one-way t-tests against true reinforcement rates
df2 <- df %>%
group_by(drug_str,trtype_str) %>%
nest() %>%
dplyr::mutate(tt=purrr::map(data,~t.test(.x$err))) %>%
dplyr::mutate(tidied = purrr::map(tt, tidy)) %>%
unnest(tidied, .drop = T)
df2$p.value.holm= p.adjust(df2$p.value, method = adjustment_method)
df2$sig <- 0
df2$sig[df2$p.value.holm<0.05] <- 1
print(df2[,c("drug_str", "trtype_str", "estimate",     "statistic", "parameter", "p.value.holm")])
data<-read.csv(here::here(data_dir,  "full_beh_dataset_p3.csv"))
fields <- c("visit", "rev_type_4plot_swchp", "drug", "outcome", "id")
data<- assign_var_types(data, fields)
data<-data[which(data$Trial_Type %in% 3),]
data<-data[which(data$trno_swchp %in% c(seq(-5, -1), seq(1,15))),]
data<-data[which(data$rev_type_4plot_swchp %in% c("acq","ext")),]
## This step is important for PLOTTING - it weights participants equally
df = data %>%
dplyr::group_by(trno_swchp, id, drug_str, visit_str, rev_type_4plot_swchp) %>%
summarise_at("prob", mean, na.rm = TRUE)
data<-read.csv(here::here(data_dir,  "full_beh_dataset_p3.csv"))
fields <- c("visit", "rev_type_4plot_swchp", "drug", "outcome", "id")
data<- assign_var_types(data, fields)
data<-data[which(data$Trial_Type %in% 3),]
data<-data[which(data$trno_swchp %in% c(seq(-5, -1), seq(1,15))),]
data<-data[which(data$rev_type_4plot_swchp %in% c("acq","ext")),]
## This step is important for PLOTTING - it weights participants equally
df = data %>%
dplyr::group_by(trno_swchp, id, drug_str, visit_str, rev_type_4plot_swchp) %>%
summarise_at("prob", funs(mean), na.rm = TRUE)
df = df %>%
group_by(trno_swchp, drug_str, visit_str, rev_type_4plot_swchp) %>%
summarise_at("prob", funs(mean,std.error),na.rm = TRUE)
df$lower = df$mean - df$std.error
df$upper = df$mean + df$std.error
pal <- get_colors("ond")
g <- ggplot(data = df, aes(y = mean, x = trno_swchp, fill=interaction(rev_type_4plot_swchp, drug_str))) +
geom_vline(xintercept=0, linetype="dashed") +
geom_line(size=1.5, show.legend = TRUE) +
geom_ribbon(aes(ymin=lower, ymax=upper),  na.rm = TRUE,alpha=0.6,show.legend = TRUE) +
scale_fill_manual(values = pal[c(1,2,3,4)], name = "", labels = c("High Threat: Losartan", "Low Threat: Losartan", "High Threat: Placebo", "Low Threat: Placebo")) +
scale_color_manual(values = pal[c(1,2,3,4)]) +
ylim(0,1) +
scale_x_continuous(breaks = c(-5, -1, 1, 5, 10), limits=c(-5,10)) +
theme_bw() +
labs(y= "Rating", x="Trial (locked to estimated switchpoint)")  +
ggtitle("Participant data") +
raincloud_theme   +
facet_grid(cols=vars(visit_str))
g
erdf <- df
ggsave(here::here(figures_dir, "Figure2a_raw.pdf"), width = 10, height = 4, dpi = 120)
data<-read.csv(here::here(data_dir,  "full_beh_dataset_p3.csv"))
data<-data[which(data$Trial_Type %in% 3),]
data<-data[which(data$trno_swchp %in% c(seq(-5, -1), seq(1,15))),]
data<-data[which(data$rev_type_4plot_swchp %in% c("acq","ext")),]
data <- data %>% mutate(prepost =
case_when(trno_swchp %in% seq(-3,-1) ~ "pre",
trno_swchp %in% seq(5, 15) ~ "post"), na.rm = TRUE)
data<-data[which(data$prepost %in% c("pre","post")),]
fields <- c("visit", "rev_type_4plot_swchp", "drug", "outcome", "id", "prepost", "sb", "trno_swchp")
data<- assign_var_types(data, fields)
### Get baseline for each reversal
dfbase <- data[data$prepost %in% "pre", c("prob", "prepost", "id", "rev_id_swchp", "drug_str", "visit_str", "rev_type_4plot_swchp", "sb")]
dfbase = dfbase %>%
group_by(id, rev_id_swchp, drug_str, visit_str, rev_type_4plot_swchp, sb) %>%
summarise_at("prob", mean, na.rm = TRUE)
data<-read.csv(here::here(data_dir,  "full_beh_dataset_p3.csv"))
data<-data[which(data$Trial_Type %in% 3),]
data<-data[which(data$trno_swchp %in% c(seq(-5, -1), seq(1,15))),]
data<-data[which(data$rev_type_4plot_swchp %in% c("acq","ext")),]
data <- data %>% mutate(prepost =
case_when(trno_swchp %in% seq(-3,-1) ~ "pre",
trno_swchp %in% seq(5, 15) ~ "post"), na.rm = TRUE)
data<-data[which(data$prepost %in% c("pre","post")),]
fields <- c("visit", "rev_type_4plot_swchp", "drug", "outcome", "id", "prepost", "sb", "trno_swchp")
data<- assign_var_types(data, fields)
### Get baseline for each reversal
dfbase <- data[data$prepost %in% "pre", c("prob", "prepost", "id", "rev_id_swchp", "drug_str", "visit_str", "rev_type_4plot_swchp", "sb")]
dfbase = dfbase %>%
group_by(id, rev_id_swchp, drug_str, visit_str, rev_type_4plot_swchp, sb) %>%
summarise_at("prob", funs(mean), na.rm = TRUE)
dfbase$prob_baseline <- dfbase$prob
dfbase <- dfbase[,c("id", "visit_str", "rev_id_swchp", "prob_baseline")]
### Get summarized data and append base
df <- data[, c("prob", "prepost", "id", "rev_id_swchp", "drug_str", "visit_str", "trno_swchp", "rev_type_4plot_swchp", "sb")]
df = df[data$prepost %in% "post",]
df <- base::merge(df, dfbase, by=c("id", "visit_str", "rev_id_swchp"))
### Subtract baseline
df$probchange <- df$prob - df$prob_baseline
df$probchange01 <- (df$probchange - min(df$probchange)) / (max(df$probchange) - min(df$probchange))
df$probchange01[df$probchange01==0] <- 0.0001
df$probchange01[df$probchange01==1] <- 0.9999
#f$probchange[df$rev_type_4plot_swchp %in% "ext"] = (-1)*df$probchange[df$rev_type_4plot_swchp %in% "ext"]
#df <- df[df$id %in% overids,]
## Add approx true prob
i <- 1
lvls <- c(0.75, 0.25)
for (ph in c("acq", "ext" )) {
df$truechange[df$rev_type_4plot_swchp %in% ph] <- lvls[i] - df$prob_baseline[df$rev_type_4plot_swchp %in% ph]
i <- i + 1
}
##### STATS ########################################################################
m <- lmer(data=df, probchange ~ drug_str*visit_str*rev_type_4plot_swchp + (1|sb) + (1|id))
m2 <- lmer(data=df, probchange ~ drug_str*visit_str*rev_type_4plot_swchp + (1+ visit_str + rev_type_4plot_swchp|id) + (1|sb))
df$model_pred <- predict(m2)
m3 <- lmer(data=df, probchange ~ drug_str*visit_str*rev_type_4plot_swchp + (1 + rev_type_4plot_swchp|id) + (1|sb))
m4 <- lmer(data=df, probchange ~ drug_str*visit_str*rev_type_4plot_swchp + (1+ visit_str |id) + (1|sb))
performance::compare_performance(m, m2, m3, m4)
anova(m2)
effectsize::effectsize(anova(m2), type="eta", alternative="two.sided")
install.packages("insight")
renv::snapshot()
options(warn=-1)
if (!require("pacman")) install.packages("pacman")
pacman::p_load("renv", "here", "knitr")
knitr::opts_chunk$set(echo = TRUE)
here::i_am(".losartan_hidden_root")
here::here()
# renv::init()
#renv::snapshot()
renv::activate(here::here(""))
dir.create(here::here("output/figures/"))
data_dir = here::here('data')
utils_dir = here::here('utils' )
figures_dir = here::here('output/figures' )
adjustment_method ="holm"
#library(devtools)
#devtools::install_github("mattelisi/mlisi")
#devtools::install_github("mattelisi/bmsR")
#required_packages = c("reshape2",  "purrr", "ggpubr", "corrplot", "ggplot2", "ggsignif", "parameters", "extdplyr", "Jmisc", "PupillometryR",  "plyr", "lme4", "lmerTest", "emmeans", #"tidyr", "ggpubr", "corrplot", "patchwork", "broom", "plotrix", "PupillometryR","glmmTMB", "Hmisc", "boot", "data.table", "devtools", "bmsR", "performance", "extdplyr", "sjmisc")
#lapply(required_packages, library, character.only = TRUE)
required_packages = c("reshape2", "sjmisc", "sjPlot", "purrr", "ggpubr", "corrplot", "dplyr","ggplot2", "ggsignif", "parameters", "extdplyr", "Jmisc", "PupillometryR",  "plyr", "lme4", "lmerTest", "emmeans", "tidyr", "ggpubr", "corrplot", "patchwork", "broom", "plotrix", "PupillometryR","glmmTMB", "Hmisc", "boot", "data.table", "devtools", "bmsR", "performance", "rstan", "dplyr", "utils", "loo", "jtools", "heplots", "effectsize", "pbkrtest", "PupillometryR")
library(PupillometryR)
options(warn=-1)
if (!require("pacman")) install.packages("pacman")
pacman::p_load("renv", "here", "knitr")
knitr::opts_chunk$set(echo = TRUE)
here::i_am(".losartan_hidden_root")
here::here()
# renv::init()
#renv::snapshot()
renv::activate(here::here(""))
dir.create(here::here("output/figures/"))
data_dir = here::here('data')
utils_dir = here::here('utils' )
figures_dir = here::here('output/figures' )
adjustment_method ="holm"
#library(devtools)
#devtools::install_github("mattelisi/mlisi")
#devtools::install_github("mattelisi/bmsR")
#required_packages = c("reshape2",  "purrr", "ggpubr", "corrplot", "ggplot2", "ggsignif", "parameters", "extdplyr", "Jmisc", "PupillometryR",  "plyr", "lme4", "lmerTest", "emmeans", #"tidyr", "ggpubr", "corrplot", "patchwork", "broom", "plotrix", "PupillometryR","glmmTMB", "Hmisc", "boot", "data.table", "devtools", "bmsR", "performance", "extdplyr", "sjmisc")
#lapply(required_packages, library, character.only = TRUE)
required_packages = c("reshape2", "sjmisc", "sjPlot", "purrr", "ggpubr", "corrplot", "dplyr","ggplot2", "ggsignif", "parameters", "extdplyr", "Jmisc", "PupillometryR",  "plyr", "lme4", "lmerTest", "emmeans", "tidyr", "ggpubr", "corrplot", "patchwork", "broom", "plotrix", "PupillometryR","glmmTMB", "Hmisc", "boot", "data.table", "devtools", "bmsR", "performance", "rstan", "dplyr", "utils", "loo", "jtools", "heplots", "effectsize", "pbkrtest", "PupillometryR")
library(PupillometryR)
options(warn=-1)
if (!require("pacman")) install.packages("pacman")
pacman::p_load("renv", "here", "knitr")
knitr::opts_chunk$set(echo = TRUE)
here::i_am(".losartan_hidden_root")
here::here()
# renv::init()
#renv::snapshot()
renv::activate(here::here(""))
dir.create(here::here("output/figures/"))
data_dir = here::here('data')
utils_dir = here::here('utils' )
figures_dir = here::here('output/figures' )
adjustment_method ="holm"
#library(devtools)
#devtools::install_github("mattelisi/mlisi")
#devtools::install_github("mattelisi/bmsR")
#required_packages = c("reshape2",  "purrr", "ggpubr", "corrplot", "ggplot2", "ggsignif", "parameters", "extdplyr", "Jmisc", "PupillometryR",  "plyr", "lme4", "lmerTest", "emmeans", #"tidyr", "ggpubr", "corrplot", "patchwork", "broom", "plotrix", "PupillometryR","glmmTMB", "Hmisc", "boot", "data.table", "devtools", "bmsR", "performance", "extdplyr", "sjmisc")
#lapply(required_packages, library, character.only = TRUE)
library(PupillometryR)
required_packages = c("reshape2", "sjmisc", "sjPlot", "purrr", "ggpubr", "corrplot", "dplyr","ggplot2", "ggsignif", "parameters", "extdplyr", "Jmisc", "PupillometryR",  "plyr", "lme4", "lmerTest", "emmeans", "tidyr", "ggpubr", "corrplot", "patchwork", "broom", "plotrix", "PupillometryR","glmmTMB", "Hmisc", "boot", "data.table", "devtools", "bmsR", "performance", "rstan", "dplyr", "utils", "loo", "jtools", "heplots", "effectsize", "pbkrtest", "PupillometryR")
#pacman::p_load(char = required_packages)
invisible(lapply(required_packages, require, character.only = TRUE))
source(here::here("..","..", "shared_functions", "r", "r_functions.R"))
pal <- get_colors("ond")
emm_options(pbkrtest.limit = 5000)
run_descriptives <- function(df, vec) {
sdf <- df[, append("drug_str", vec)]
for (i in as.character(vec)) {
tsdf = sdf %>%
group_by(drug_str) %>%
summarise_at(i, funs(mean,sd),na.rm = TRUE)
tsdf$varname <- i
print(tsdf)
}
pvals <- sdf %>%
summarise_each(funs(t.test(.[drug_str == "losartan"], .[drug_str == "placebo"])$p.value), vars =  vec)
tscores <- sdf %>%
summarise_each(funs(t.test(.[drug_str == "losartan"], .[drug_str == "placebo"])$statistic), vars =  vec)
dfs <- sdf %>%
summarise_each(funs(t.test(.[drug_str == "losartan"], .[drug_str == "placebo"])$parameter), vars =  vec)
stats <- rbind(pvals, tscores, dfs, vec)
stats <- data.table::transpose(stats)
colnames(stats) <- c("p", "t", "df", "variable")
print(stats)
}
#prepare data for this entire section
data<-read.csv(here::here(data_dir, "data_across_mods_pupiltype_amplitude.csv"))
df<-data[which(data$visit_str %in% c("v2")),]
#check! df[,c("group_raw", "drug_str")] gooD!
df$sb <- paste0("sp", as.factor(df$sb_mdata))
df$lang <- as.character(df$X1stlang)
df$lang[!(df$lang %in% "engl")] <- "other"
vec <- c("heart_rate_base",   "heart_rate_peak")
run_descriptives(df, vec)
#df$education <- as.numeric(df$education)
sdf <- df[, c("drug_str", "Gender", "NART", "Age", "education", "lang" )]
## Means
for (i in as.character(c( "NART", "Age", "education"))) {
tsdf = sdf %>%
group_by(drug_str) %>%
summarise_at(i, funs(mean,sd),na.rm = TRUE)
print(tsdf)
}
# Frequencies/percentages
tsdf = sdf %>%
group_by( drug_str, Gender) %>%
pct_routine(ret_name = "pct")
print(tsdf)
tsdf = sdf %>%
group_by( drug_str, lang) %>%
pct_routine(ret_name = "pct")
print(tsdf)
vec <- c("NART", "Age", "education")
# T-tests on continuous variables
pvals <- sdf %>%
summarise_each(funs(t.test(.[drug_str == "losartan"], .[drug_str == "placebo"])$p.value), vars = vec)
tscores <- sdf %>%
summarise_each(funs(t.test(.[drug_str == "losartan"], .[drug_str == "placebo"])$statistic), vars =  vec)
dfs <- sdf %>%
summarise_each(funs(t.test(.[drug_str == "losartan"], .[drug_str == "placebo"])$parameter), vars =  vec)
stats <- rbind(pvals, tscores, dfs, vec)
stats <- data.table::transpose(stats)
colnames(stats) <- c("p", "t", "df", "variable")
print(stats)
# Chi-squared test on freq
sdf$drug_str <- as.character(sdf$drug_str)
sdf$Gender <- as.character(sdf$Gender)
sdf$lang <- as.character(sdf$lang)
chisq <- chisq.test(table(sdf$drug_str, sdf$Gender))
chisq
chisq <- chisq.test(table(sdf$drug_str, sdf$lang))
chisq
vec <- c(  "STAIT",   "ASI",  "BDI",   "EPQ_N",  "ACS_total", "ACS_Focussing", "ACS_Shifting")
run_descriptives(df, vec)
## Heart rate
vec <- c("heart_rate_base",   "heart_rate_peak")
run_descriptives(df, vec)
df$vas_T1_hr <- df$heart_rate_base
df$vas_T2_hr <- df$heart_rate_peak
## Blood pressure
vec <- c("blood_pressure_base_syst",  "blood_pressure_base_diast", "blood_pressure2_syst", "blood_pressure2_diast")
run_descriptives(df, vec)
df$vas_T1_bpsys <- df$blood_pressure_base_syst
df$vas_T2_bpsys <- df$blood_pressure2_syst
df$vas_T1_bpdia <- df$blood_pressure_base_diast
df$vas_T2_bpdia <- df$blood_pressure2_diast
## VAS measures
vars<- c("anx", "tearful", "hopeless", "sad", "depr", "sleep", "nauseous","dizzy", "tachy", "alert", "flushed")
for (t in  c("vas_T1_", "vas_T2_", "vas_T3_")) {
vec <- paste(t, vars, sep="")
sdf <- df[, append("drug_str", vec)]
for (i in as.character(paste(t, vars, sep=""))) {
tsdf = sdf %>%
group_by(drug_str) %>%
summarise_at(i, funs(mean,sd),na.rm = TRUE)
tsdf$varname <- i
print(tsdf)
}
pvals <- sdf %>%
summarise_each(funs(t.test(.[drug_str == "losartan"], .[drug_str == "placebo"])$p.value), vars =  vec)
tscores <- sdf %>%
summarise_each(funs(t.test(.[drug_str == "losartan"], .[drug_str == "placebo"])$statistic), vars =  vec)
dfs <- sdf %>%
summarise_each(funs(t.test(.[drug_str == "losartan"], .[drug_str == "placebo"])$parameter), vars =  vec)
stats <- rbind(pvals, tscores, dfs, vec)
stats <- data.table::transpose(stats)
colnames(stats) <- c("p", "t", "df", "variable")
print(stats)
}
vars <- append(c("hr", "bpsys", "bpdia"), vars )
### VAS measures F-tests!
for (v in vars) {
vec <- paste(c("vas_T1_", "vas_T2_"), v, sep="")
ldf <- df[, append("drug_str", vec)]
ldf<-tidyr::pivot_longer(data=ldf, cols=vec, names_to="visit", values_to=v)
m<-lm(data=ldf, paste0(v, " ~ drug_str*visit"))
an <- anova(m)
print(an)
}
#df$vas_T1_bpsys <- df$blood_pressure_base_syst
#df$vas_T2_bpsys <- df$blood_pressure2_syst
#df$vas_T1_bpdia <- df$blood_pressure_base_diast
#df$vas_T2_bpdia <- df$blood_pressure2_diast
df$id <- df$ids_Q
phys_df = df
df_sys <- df %>%
reshape2::melt(id.vars = c("id", "drug_str"),  # variables to carry forward
measure.vars = c("vas_T1_bpsys", "vas_T2_bpsys"),  #variables to stack
value.name = "bpsys",     # name of the value variable
variable.name = "time" ) # name of the variable
df_dia <- df %>%
reshape2::melt(id.vars = c("id", "drug_str"),  # variables to carry forward
measure.vars = c("vas_T1_bpdia", "vas_T2_bpdia"),  #variables to stack
value.name = "bpdia",     # name of the value variable
variable.name = "time" ) # name of the variable
df_sys2 <- df_sys %>%
group_by(time,drug_str) %>%
dplyr::summarise_at(c("bpsys"), funs(mean), na.rm = TRUE)
df_sys2
df_dia2 <- df_dia %>%
group_by(time, drug_str) %>%
summarise_at(c("bpdia"), funs(mean), na.rm = TRUE)
df_dia2
m<- lm(data=df_sys, bpsys~time*drug_str)
anova(m)
m<- lm(data=df_dia, bpdia~time*drug_str)
anova(m)
## Task properties
vec <- c(  "sh_int", "first_prob")
run_descriptives(df, vec)
sdf <- df[, c("drug_str", "sb")]
sdf$sb <- as.character(sdf$sb)
sdf <- sdf[sdf$drug_str %in% c("losartan", "placebo"),]
chisq <- chisq.test(table(sdf$drug_str, sdf$sb)[c("losartan", "placebo"), c("sp25", "sp75")])
#chisq <- chisq.test(sdf)
chisq
table(sdf$drug_str, sdf$sb)[c("losartan", "placebo"), c("sp25", "sp75")]/20
data<-read.csv(here::here(data_dir, "data_across_mods_pupiltype_amplitude.csv"))
df<-data[which(data$visit_str %in% c("v2")),]
table(df$demand_exp, df$drug_str)[c("losartan", "placebo"), c("losartan", "placebo")]
16/40
table(df$demand_pat, df$drug_str)[c("losartan", "placebo"), c("losartan", "placebo")]
20/40
chisq.test(table(df$demand_exp, df$drug_str)[c("losartan", "placebo"), c("losartan", "placebo")])
chisq.test(table(df$demand_pat, df$drug_str)[c("losartan", "placebo"), c("losartan", "placebo")])
data<-read.csv(here::here(data_dir, "p3_est_switch_data.csv"))
data<- data[data$visit %in% c(1,2, 3),]
data["drug_str"] =  data["group"]
data<-data[which(data$phase_str %in% c("acq","ext")),]
fields <- c("visit", "phase_str", "drug_str", "outcome", "id", "sb")
data2<- assign_var_types(data, fields)
df = data2 %>%
group_by(id, drug_str, visit_str, sb, phase_str) %>%
summarise_at("switchpoint", funs(mean), na.rm = TRUE)
pal <- get_colors("ond")
g <- ggplot(data = df, aes(y = switchpoint, x = visit_str, fill = drug_str)) +
geom_flat_violin(position = position_nudge(x = .2, y = 0), alpha = .8, show.legend = FALSE, lwd=1.2) +
geom_point(aes(y = switchpoint, colour=drug_str), position = position_jitter(width = .15), size = 1, alpha = 0.8, show.legend = FALSE) +
geom_boxplot(width = .2, outlier.shape = NA, alpha = 0.7,lwd=1.2, show.legend = TRUE) +
#geom_label(data = df2, aes(label = BIC, x = model, fill = drug_str, y = 100),  size=5) +
expand_limits(x = 3) +
scale_color_manual(values = c(pal[8], pal[10]), name = "group", labels = c("placebo", "losartan")) +
scale_fill_manual(values = c(pal[8], pal[10]), name = "group", labels = c("placebo", "losartan")) +
theme_bw() +
raincloud_theme
g
m <- lmer(switchpoint ~ drug_str*visit_str*phase_str + (1+visit_str+phase_str|id)  + (1|sb) , data2) # without half
anova(m)
joint_tests(m, by = c("visit_str"))
em <- emmeans(m, specs = pairwise ~ visit_str*drug_str, adjust=adjustment_method)
em$emmeans
em$contrasts
mean(data2$switchpoint)
sd(data2$switchpoint)
data<-read.csv(here::here(data_dir,  "full_beh_dataset_p3.csv"))
data<-data[which(data$Trial_Type %in% c(1,2) & (data$visit %in% c(2))),]# & (data$Reversal_ID %in% c(1,2,3,4,5,6))),]
fields <- c("visit", "trtype_str", "drug", "outcome", "id")
data$err <- data$err_true
data<- assign_var_types(data, fields)
df <- data %>%
group_by(id, drug_str,  trtype_str, sb) %>%
summarise_at(c("err", "prob"), funs(mean), na.rm = TRUE)
#emm_options(pbkrtest.limit = 7380)
m <- lmer(prob ~   drug_str*trtype_str + (1|id) + (1|sb), data=df)
anova(m)
emmeans(m, pairwise ~ drug_str*trtype_str, adjust=adjustment_method)
t.test(data=df[df$trtype_str %in% "low-prob",], prob ~ drug_str )
t.test(data=df[df$trtype_str %in% "hi-prob",], prob ~ drug_str )
# one-way t-tests against true reinforcement rates
df2 <- df %>%
group_by(drug_str,trtype_str) %>%
nest() %>%
dplyr::mutate(tt=purrr::map(data,~t.test(.x$err))) %>%
dplyr::mutate(tidied = purrr::map(tt, tidy)) %>%
unnest(tidied, .drop = T)
df2$p.value.holm= p.adjust(df2$p.value, method = adjustment_method)
df2$sig <- 0
df2$sig[df2$p.value.holm<0.05] <- 1
print(df2[,c("drug_str", "trtype_str", "estimate",     "statistic", "parameter", "p.value.holm")])
data<-read.csv(here::here(data_dir,  "full_beh_dataset_p3.csv"))
fields <- c("visit", "rev_type_4plot_swchp", "drug", "outcome", "id")
data<- assign_var_types(data, fields)
data<-data[which(data$Trial_Type %in% 3),]
data<-data[which(data$trno_swchp %in% c(seq(-5, -1), seq(1,15))),]
data<-data[which(data$rev_type_4plot_swchp %in% c("acq","ext")),]
## This step is important for PLOTTING - it weights participants equally
df = data %>%
dplyr::group_by(trno_swchp, id, drug_str, visit_str, rev_type_4plot_swchp) %>%
summarise_at("prob", funs(mean), na.rm = TRUE)
df = df %>%
group_by(trno_swchp, drug_str, visit_str, rev_type_4plot_swchp) %>%
summarise_at("prob", funs(mean,std.error),na.rm = TRUE)
df$lower = df$mean - df$std.error
df$upper = df$mean + df$std.error
pal <- get_colors("ond")
g <- ggplot(data = df, aes(y = mean, x = trno_swchp, fill=interaction(rev_type_4plot_swchp, drug_str))) +
geom_vline(xintercept=0, linetype="dashed") +
geom_line(size=1.5, show.legend = TRUE) +
geom_ribbon(aes(ymin=lower, ymax=upper),  na.rm = TRUE,alpha=0.6,show.legend = TRUE) +
scale_fill_manual(values = pal[c(1,2,3,4)], name = "", labels = c("High Threat: Losartan", "Low Threat: Losartan", "High Threat: Placebo", "Low Threat: Placebo")) +
scale_color_manual(values = pal[c(1,2,3,4)]) +
ylim(0,1) +
scale_x_continuous(breaks = c(-5, -1, 1, 5, 10), limits=c(-5,10)) +
theme_bw() +
labs(y= "Rating", x="Trial (locked to estimated switchpoint)")  +
ggtitle("Participant data") +
raincloud_theme   +
facet_grid(cols=vars(visit_str))
g
erdf <- df
ggsave(here::here(figures_dir, "Figure2a_raw.pdf"), width = 10, height = 4, dpi = 120)
data<-read.csv(here::here(data_dir,  "full_beh_dataset_p3.csv"))
data<-data[which(data$Trial_Type %in% 3),]
data<-data[which(data$trno_swchp %in% c(seq(-5, -1), seq(1,15))),]
data<-data[which(data$rev_type_4plot_swchp %in% c("acq","ext")),]
data <- data %>% mutate(prepost =
case_when(trno_swchp %in% seq(-3,-1) ~ "pre",
trno_swchp %in% seq(5, 15) ~ "post"), na.rm = TRUE)
data<-data[which(data$prepost %in% c("pre","post")),]
fields <- c("visit", "rev_type_4plot_swchp", "drug", "outcome", "id", "prepost", "sb", "trno_swchp")
data<- assign_var_types(data, fields)
### Get baseline for each reversal
dfbase <- data[data$prepost %in% "pre", c("prob", "prepost", "id", "rev_id_swchp", "drug_str", "visit_str", "rev_type_4plot_swchp", "sb")]
dfbase = dfbase %>%
group_by(id, rev_id_swchp, drug_str, visit_str, rev_type_4plot_swchp, sb) %>%
summarise_at("prob", funs(mean), na.rm = TRUE)
dfbase$prob_baseline <- dfbase$prob
dfbase <- dfbase[,c("id", "visit_str", "rev_id_swchp", "prob_baseline")]
### Get summarized data and append base
df <- data[, c("prob", "prepost", "id", "rev_id_swchp", "drug_str", "visit_str", "trno_swchp", "rev_type_4plot_swchp", "sb")]
df = df[data$prepost %in% "post",]
df <- base::merge(df, dfbase, by=c("id", "visit_str", "rev_id_swchp"))
### Subtract baseline
df$probchange <- df$prob - df$prob_baseline
df$probchange01 <- (df$probchange - min(df$probchange)) / (max(df$probchange) - min(df$probchange))
df$probchange01[df$probchange01==0] <- 0.0001
df$probchange01[df$probchange01==1] <- 0.9999
#f$probchange[df$rev_type_4plot_swchp %in% "ext"] = (-1)*df$probchange[df$rev_type_4plot_swchp %in% "ext"]
#df <- df[df$id %in% overids,]
## Add approx true prob
i <- 1
lvls <- c(0.75, 0.25)
for (ph in c("acq", "ext" )) {
df$truechange[df$rev_type_4plot_swchp %in% ph] <- lvls[i] - df$prob_baseline[df$rev_type_4plot_swchp %in% ph]
i <- i + 1
}
##### STATS ########################################################################
m <- lmer(data=df, probchange ~ drug_str*visit_str*rev_type_4plot_swchp + (1|sb) + (1|id))
m2 <- lmer(data=df, probchange ~ drug_str*visit_str*rev_type_4plot_swchp + (1+ visit_str + rev_type_4plot_swchp|id) + (1|sb))
df$model_pred <- predict(m2)
m3 <- lmer(data=df, probchange ~ drug_str*visit_str*rev_type_4plot_swchp + (1 + rev_type_4plot_swchp|id) + (1|sb))
m4 <- lmer(data=df, probchange ~ drug_str*visit_str*rev_type_4plot_swchp + (1+ visit_str |id) + (1|sb))
performance::compare_performance(m, m2, m3, m4)
anova(m2)
effectsize::effectsize(anova(m2), type="eta", alternative="two.sided")
em <- emmeans(m2, ~ visit_str | drug_str/rev_type_4plot_swchp, adjust=adjustment_method)
pairs(em, adjust=adjustment_method)
a<-summary(pairs(em, adjust=adjustment_method))
eff<-effectsize::t_to_eta2(t=a$t.ratio, df_error = a$df, alternative = "two.sided")
